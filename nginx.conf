events {
    worker_connections 1024;
}

http {

    server {

        # Render 會透過環境變數 $PORT 指定埠號
        # 我們用一個佔位符 LISTEN_PORT，稍後由啟動腳本替換
        listen LISTEN_PORT;

        location /api/ {
            # --- START: 新增的 CORS 設定 ---

            # 允許來自任何來源的請求。在區網測試中用 '*' 最方便。
            # 若是正式環境，應換成指定的網域名稱，例如 'https://www.my-app.com'
            add_header 'Access-Control-Allow-Origin' '*' always;

            # 允許的 HTTP 請求方法
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;

            # 允許客戶端（瀏覽器）發送的標頭
            add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization' always;

            # 瀏覽器對於複雜請求（例如 POST JSON）會先發送一個 OPTIONS 預檢請求
            # 我們直接回傳 204 No Content，表示允許
            if ($request_method = 'OPTIONS') {
                return 204;
            }
            
            rewrite ^/api/(.*)$ /$1 break;

            # --- END: 新增的 CORS 設定 ---
            # 直接代理到 Node.js API 服務監聽的 3000 埠
            proxy_pass http://127.0.0.1:3000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
        }

        location /ws {
            # 直接代理到 Node.js WebSocket 服務監聽的 8080 埠
            proxy_pass http://127.0.0.1:8080;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
        }
        
        # 根路徑可以返回一個簡單的訊息
        location / {
            return 200 'API server is running. Use /api for commands and /ws for devices.';
        }
    }
}